/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DAO.EmprestimoDAO;
import DAO.ExemplarDAO;
import DAO.FuncionarioDAO;
import DAO.UsuarioDAO;
import Entidade.Emprestimo;
import Entidade.Exemplar;
import Entidade.Funcionario;
import Entidade.Usuario;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mats-
 */
public class JanelaEmprestimo extends javax.swing.JFrame {

    /**
     * Creates new form JanelaEmprestimo
     */
    public JanelaEmprestimo()
    {
        initComponents();
        preencherTableFunc();
        preencherTableUser();
        preencherTableEx();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btGrupo = new javax.swing.ButtonGroup();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableUsuario1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rbFuncionario = new javax.swing.JRadioButton();
        rbUsuario = new javax.swing.JRadioButton();
        rbExemplar = new javax.swing.JRadioButton();
        txtPesquisa = new javax.swing.JTextField();
        btnPesquisa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFuncionario = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableExemplar = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableUsuario2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableEmprestimo = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtDataEmprestimo = new javax.swing.JTextField();
        txtDataDevolucao = new javax.swing.JTextField();
        txtObs = new javax.swing.JTextField();
        txtCodFunc = new javax.swing.JTextField();
        txtCodUser = new javax.swing.JTextField();
        txtCodEx = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTableUsuario1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        jScrollPane3.setViewportView(jTableUsuario1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Emprestimo");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Pesquisar Por:");

        btGrupo.add(rbFuncionario);
        rbFuncionario.setText("Funcionário");

        btGrupo.add(rbUsuario);
        rbUsuario.setText("Usuário");

        btGrupo.add(rbExemplar);
        rbExemplar.setText("Exemplar");

        btnPesquisa.setText("Pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnPesquisaActionPerformed(evt);
            }
        });

        jTableFuncionario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        jTableFuncionario.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jTableFuncionarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFuncionario);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Selecione o Funcionário");

        jTableExemplar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        jTableExemplar.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jTableExemplarMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableExemplar);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("Selecione o Usuário");

        jTableUsuario2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        jTableUsuario2.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                jTableUsuario2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTableUsuario2);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Selecione o Exemplar");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Empréstimos");

        jTableEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {},
                {},
                {},
                {}
            },
            new String []
            {

            }
        ));
        jScrollPane5.setViewportView(jTableEmprestimo);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Dados Emprestimo");

        jLabel7.setText("Data Empréstimo");

        jLabel8.setText("Data Devolução");

        jLabel9.setText("Observações");

        jLabel10.setText("Código Funcionário");

        jLabel11.setText("Código Usuário");

        jLabel12.setText("Código Exemplar");

        jButton1.setText("Emprestar");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Devolver");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtObs, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCodFunc, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(txtCodUser, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCodEx, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtDataEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8))
                    .addComponent(txtDataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(txtCodFunc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(txtCodUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(txtCodEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(rbFuncionario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbUsuario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbExemplar))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rbFuncionario)
                    .addComponent(rbUsuario)
                    .addComponent(rbExemplar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(txtPesquisa))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void preencherTableFunc()
    {

        try
        {

            FuncionarioDAO funcdao = new FuncionarioDAO();

            for (Funcionario a : funcdao.BuscarFuncionario())
            {
                tmFuncionario.addRow(new String[]
                {
                    String.valueOf(a.getCodigo()),
                    String.valueOf(a.getNome()),
                    String.valueOf(a.getCpf()),

                });
            }//fecha for

            /* Adicionando o modelo de tabela 
             com os dados na tabela produto */
            jTableFuncionario.setModel(tmFuncionario);

        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
                    "Erro!!! " + e.getMessage());

        }

    }

    private void preencherTableUser()
    {

        try
        {

            UsuarioDAO userdao = new UsuarioDAO();

            for (Usuario a : userdao.BuscarUsuario())
            {
                tmUsuario.addRow(new String[]
                {
                    String.valueOf(a.getCodigo()),
                    String.valueOf(a.getNome()),
                    String.valueOf(a.getAtivo()),

                });
            }//fecha for

            /* Adicionando o modelo de tabela 
             com os dados na tabela produto */
            jTableUsuario2.setModel(tmUsuario);

        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
                    "Erro!!! " + e.getMessage());

        }

    }

    private void preencherTableEx()
    {

        try
        {

            ExemplarDAO exdao = new ExemplarDAO();

            for (Exemplar a : exdao.BuscarExemplar())
            {
                tmExemplar.addRow(new String[]
                {
                    String.valueOf(a.getCodigo()),
                    String.valueOf(a.getDisponivel()),
                    String.valueOf(a.getNumExemplar()),
                    String.valueOf(a.getLivro().getTitulo())
                });
            }//fecha for

            /* Adicionando o modelo de tabela 
             com os dados na tabela produto */
            jTableExemplar.setModel(tmExemplar);

        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(this,
                    "Erro!!! " + e.getMessage());

        }

    }

    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed

        if (!(rbFuncionario.isSelected() || rbUsuario.isSelected() || rbExemplar.isSelected()))
        {
            JOptionPane.showMessageDialog(rootPane, "Selecione um campo de pesquisa.");
        } else if (rbFuncionario.isSelected())
        {
            // Quando seleciona PESQUISA Funcionário
            try
            {
                listaFuncionario();
            } catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(rootPane, "Erro ao listar Funcionários.");
            }
        } else if (rbUsuario.isSelected())
        {
            // Quando seleciona PESQUISA Usuários
            try
            {
                listaUsuario();
            } catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(rootPane, "Problemas ao listar Usuários.");
            }
        } else if (rbExemplar.isSelected())
        {
            // Quando seleciona PESQUISA Exemplares
            try
            {
                listaExemplares();
            } catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(rootPane, "Problemas ao listar Exemplares.");
            }
        }

    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void jTableFuncionarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableFuncionarioMouseClicked
        int linhaSelecionada = jTableFuncionario.getSelectedRow();

        txtCodFunc.setText(jTableFuncionario.getValueAt(linhaSelecionada, 0).toString());
    }//GEN-LAST:event_jTableFuncionarioMouseClicked

    private void jTableUsuario2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableUsuario2MouseClicked
        int linhaSelecionada = jTableUsuario2.getSelectedRow();

        txtCodUser.setText(jTableUsuario2.getValueAt(linhaSelecionada, 0).toString());
    }//GEN-LAST:event_jTableUsuario2MouseClicked

    private void jTableExemplarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableExemplarMouseClicked
        int linhaSelecionada = jTableExemplar.getSelectedRow();

        txtCodEx.setText(jTableExemplar.getValueAt(linhaSelecionada, 0).toString());

        try
        {
            listaContatosEmprestimo();
        } catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane, "Erro ao listar emprestimos.");
        }
    }//GEN-LAST:event_jTableExemplarMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try
        {
            devolveExemplar();
        } catch (SQLException ex)
        {
            JOptionPane.showMessageDialog(rootPane, "Erro ao devolver livro.");
        } catch (ParseException ex)
        {

        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try
        {
            cadastraRegistro();
        } catch (SQLException ex)
        {
            Logger.getLogger(JanelaEmprestimo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cadastraRegistro() throws SQLException
    {
        // Antes de cadastrar, verifica se o usuário está com algum registro selecionado
        if (!(jTableEmprestimo.getSelectedRow() != -1))
        {
            // Antes de cadastrar, verifica se os campos foram preenchidos
            if (verificaDados())
            {
                if (verificaDisponibilidade())
                {
                    EmprestimoDAO d = new EmprestimoDAO();

                    try
                    {
                        Emprestimo e = new Emprestimo();

                        Funcionario f = new Funcionario();
                        f.setCodigo(Integer.valueOf(txtCodFunc.getText()));
                        e.setFuncionario(f);
                        Usuario u = new Usuario();
                        u.setCodigo(Integer.valueOf(txtCodUser.getText()));
                        e.setUsuario(u);
                        Exemplar ex = new Exemplar();
                        ex.setCodigo(Integer.valueOf(txtCodEx.getText()));
                        e.setExemplar(ex);
                        e.setObservacao(txtObs.getText());
                        e.setDataretirada(salvaDataEmprestimo());
                        e.setDataDevolucao(salvaDataDevolucao());

                        d = new EmprestimoDAO();

                        d.Salvar(e);

                        alteraDisponibilidade(false);

                        JOptionPane.showMessageDialog(rootPane, "Empréstimo efetuado com sucesso.");
                        // limpaCamposEmprestimo();

                        listaContatosEmprestimo();
                        listaExemplares();

                    } catch (SQLException ex)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Erro ao efetuar empréstimo.");
                    }
                } else
                {
                    JOptionPane.showMessageDialog(rootPane, "ERRO Empréstimo não autorizado.\nUsuário com pendências correspondentes à multa.\n\n"
                            + "Só poderá solicitar um novo empréstimo após sanar as pendências.");
                }
            }
        }
    }

    private boolean verificaDados()
    {
        if ((!txtCodFunc.getText().equals("")) && (!txtCodUser.getText().equals("")) && (!txtCodEx.getText().equals(""))
                && (!txtObs.getText().equals("")) && (!txtDataEmprestimo.getText().equals("")))
        {
            return true;
        }
        JOptionPane.showMessageDialog(rootPane, "Dados imcompletos.");
        return false;
    }

    // Pega o campo disponibilidade do livro selecionado
    public String disponibilidadeExemplar()
    {
        // Salva a posição da linha selecionada na tabela de pesquisa
        int linhaSelecionada = jTableExemplar.getSelectedRow();
        String status = (String) jTableExemplar.getValueAt(linhaSelecionada, 3);

        return status;
    }

    private boolean verificaDisponibilidade()
    {
        if (!disponibilidadeExemplar().equals("0"))
        {
            return true;
        }
        JOptionPane.showMessageDialog(rootPane, "Exemplar selecionado está indisponível.");
        return false;
    }

    /* <-CADASTRO---- */

 /* ----DATAS-> */
    // Exibe a data do empréstimo(data atual) no formulário
    private void dataEmprestimo()
    {
        Date data = new Date();

        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
        String s = formataData.format(data);

        txtDataEmprestimo.setText(formataData.format(data));
    }

    // Retorna a data de empréstimo
    private String salvaDataEmprestimo()
    {
        Date data = new Date();

        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");
        String dataEmprestimoFormatada = formataData.format(data);

        return dataEmprestimoFormatada;
    }

    // Exibe a data de devolução no formulário
    private void mostraDataDevolucao()
    {
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 10 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 7);

        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);

        txtDataDevolucao.setText(dataDevolucaoFormatada);
    }

    // Retorna a data de devolução, pronta p/ ser salva no BD
    public String salvaDataDevolucao()
    {
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 10 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 7);

        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);

        return dataDevolucaoFormatada;
    }

    // Pega a data de devolução no registro selecionado na tebela de emprestimo
    public String pegaDataDevolucaoTabela() throws ParseException
    {

        int linhaSelecionada = jTableEmprestimo.getSelectedRow();
        String dataTabela = (jTableEmprestimo.getValueAt(linhaSelecionada, 4)).toString();

        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");
        Date dataDevolucao = new Date();

        dataDevolucao = formataData.parse(dataTabela);

        return formataData.format(dataDevolucao);
    }

    // Calcula a diferença entre a data prevista para devolução e a data atual
    private long diferencaData() throws ParseException
    {
        LocalDate atual = LocalDate.now();
        LocalDate dataDevolucao = LocalDate.parse(pegaDataDevolucaoTabela());

        long diferenca = 0;

        if (dataDevolucao.compareTo(atual) < 0)
        {
            diferenca = ChronoUnit.DAYS.between(dataDevolucao, atual);
        }

        return diferenca;
    }

    // Configura campos da tabela de pesquisas de acordo com os campos do funcionario
    DefaultTableModel tmFuncionario = new DefaultTableModel(null, new String[]
    {
        "Código", "Nome", "CPF"
    });
   
    

    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaFuncionario() throws SQLException
    {
          List<Funcionario> funcionarios = new FuncionarioDAO().BuscarPorNome(txtPesquisa.getText());

        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaFuncionario(funcionarios);
        funcionarios.clear();
    }

    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaFuncionario(List<Funcionario> funcionarios)
    {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaFuncionario();

        if (funcionarios.isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Nenhum registro não encontrado.");
        } else
        {
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[]
            {
                null, null, null
            };
            // P/ cada registro é criada uma nova linha, cada recebe linha os campos do registro
            for (int i = 0; i < funcionarios.size(); i++)
            {
                tmFuncionario.addRow(linha);
                tmFuncionario.setValueAt(funcionarios.get(i).getCodigo(), i, 0);
                tmFuncionario.setValueAt(funcionarios.get(i).getNome(), i, 1);
                tmFuncionario.setValueAt(funcionarios.get(i).getCpf(), i, 2);
            }
        }
    }

    // Limpa a tabela de resultados
    private void limpaTabelaFuncionario()
    {
        while (tmFuncionario.getRowCount() > 0)
        {
            tmFuncionario.removeRow(0);
        }
    }

    DefaultTableModel tmUsuario = new DefaultTableModel(null, new String[]
    {
        "Código", "Nome", "Ativo"
    });
    // Lista de clientes, recebe os registros retornados da pesquisa
   

    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaUsuario() throws SQLException
    {
        List<Usuario> usuarios = new UsuarioDAO().BuscarPorNome(txtPesquisa.getText());

        // Após pesquisar , executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaUsuario(usuarios);
        usuarios.clear();

    }

    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaUsuario(List<Usuario> usuarios)
    {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaUsuario();

        if (usuarios.isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Nenhum registro não encontrado.");
        } else
        {
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[]
            {
                null, null, null
            };
            // P/ cada registro é criada uma nova linha, cada recebe linha os campos do registro
            for (int i = 0; i < usuarios.size(); i++)
            {
                tmUsuario.addRow(linha);
                tmUsuario.setValueAt(usuarios.get(i).getCodigo(), i, 0);
                tmUsuario.setValueAt(usuarios.get(i).getNome(), i, 1);
                tmUsuario.setValueAt(usuarios.get(i).getAtivo(), i, 2);
            }
        }
    }
    
     DefaultTableModel tmExemplar = new DefaultTableModel(null, new String[]
    {
        "Código", "Disponibilidade", "Num_Exemplares", "Tit.Livro"
    });
   

    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaExemplares() throws SQLException
    {
         List<Exemplar> exemplares = new ExemplarDAO().BuscarPorTitulo(txtPesquisa.getText());

        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaExemplar(exemplares);
        exemplares.clear();
    }

    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaExemplar(List<Exemplar> exemplares)
    {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaExemplar();

        if (exemplares.isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Nenhum registro encontrado.");
        } else
        {
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[]
            {
                null, null, null, null
            };
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < exemplares.size(); i++)
            {
                tmExemplar.addRow(linha);
                tmExemplar.setValueAt(exemplares.get(i).getCodigo(), i, 0);
                tmExemplar.setValueAt(exemplares.get(i).getLivro().getTitulo(), i, 1);
                tmExemplar.setValueAt(exemplares.get(i).getNumExemplar(), i, 2);
                tmExemplar.setValueAt(exemplares.get(i).getDisponivel(), i, 3);
            }
        }
    }

    // Limpa a tabela de resultados
    private void limpaTabelaUsuario()
    {
        while (tmUsuario.getRowCount() > 0)
        {
            tmUsuario.removeRow(0);
        }
    }

    /*<-CLIENTE----*/
    private String pegaIdFuncionario() throws SQLException
    {
        int linhaSelecionada = jTableFuncionario.getSelectedRow();

        String s = jTableFuncionario.getValueAt(linhaSelecionada, 0).toString();

        return s;
    }

    /*----EMPRÉSTIMO->*/
    // Configura campos da tabela de pesquisas de acordo com os campos dos Empréstimos
    DefaultTableModel tmEmprestimo = new DefaultTableModel(null, new String[]
    {
        "Código", "ID_Funcionário", "ID_Usuário", "ID_Exemplar", "Observações", "Data Emprestimo", "Data Devolução"
    });
    // Lista de empréstimos, recebe os registros retornados da pesquisa
    List<Emprestimo> emprestimos;

    // Lista a quantidade de resultado, de acordo com o nome passado no campo pesquisa
    private void listaContatosEmprestimo() throws SQLException
    {
        EmprestimoDAO d = new EmprestimoDAO();
        emprestimos = d.BuscarPorFunc(pegaIdFuncionario());

        // Após pesquisar os contatos, executa o método p/ exibir o resultado na tabela pesquisa
        mostraPesquisaEmprestimo(emprestimos);
        emprestimos.clear();
    }

    // Mostra a lista de resultado de acordo com o nome passado no campo pesquisa
    private void mostraPesquisaEmprestimo(List<Emprestimo> emprestimos)
    {
        // Limpa a tabela sempre que for solicitado uma nova pesquisa
        limpaTabelaEmprestimo();

        if (emprestimos.isEmpty())
        {
        } else
        {
            // Linha em branco usada no for, para cada registro é criada uma nova linha 
            String[] linha = new String[]
            {
                null, null, null, null, null, null, null
            };
            // P/ cada registro é criada uma nova linha, cada linha recebe os campos do registro
            for (int i = 0; i < emprestimos.size(); i++)
            {
                tmEmprestimo.addRow(linha);
                tmEmprestimo.setValueAt(emprestimos.get(i).getCodigo(), i, 0);
                tmEmprestimo.setValueAt(emprestimos.get(i).getUsuario(), i, 1);
                tmEmprestimo.setValueAt(emprestimos.get(i).getFuncionario(), i, 2);
                tmEmprestimo.setValueAt(emprestimos.get(i).getExemplar(), i, 3);
                tmEmprestimo.setValueAt(emprestimos.get(i).getObservacao(), i, 4);
                tmEmprestimo.setValueAt(emprestimos.get(i).getDataretirada(), i, 5);
                tmEmprestimo.setValueAt(emprestimos.get(i).getDataDevolucao(), i, 6);
            }
        }
    }

    // Limpa a tabela de resultados
    private void limpaTabelaEmprestimo()
    {
        while (tmEmprestimo.getRowCount() > 0)
        {
            tmEmprestimo.removeRow(0);
        }
    }
    /*<-EMPRESTIMO----*/

 /* ----LIVRO-> */
    // Edita os campos e colunas da tabela de resultados
   

    // Limpa a tabela de resultados
    private void limpaTabelaExemplar()
    {
        while (tmExemplar.getRowCount() > 0)
        {
            tmExemplar.removeRow(0);
        }
    }

    private String pegaIdExemplar()
    {
        int linhaSelecionada;
        String s = "0";
        if (jTableEmprestimo.getSelectedRow() != -1)
        {
            linhaSelecionada = jTableEmprestimo.getSelectedRow();
            s = jTableEmprestimo.getValueAt(linhaSelecionada, 2).toString();
        } else if (jTableExemplar.getSelectedRow() != -1)
        {
            linhaSelecionada = jTableExemplar.getSelectedRow();
            s = jTableExemplar.getValueAt(linhaSelecionada, 0).toString();
        }

        return s;
    }

    private void alteraDisponibilidade(Boolean status) throws SQLException
    {
        if ((jTableUsuario2.getSelectedRow() != -1) || (jTableUsuario2.getSelectedRow() != -1))
        {
            Exemplar l = new Exemplar();
            ExemplarDAO d = new ExemplarDAO();

            // Recebe o id do livro, que está sendo exibido no formulário
            l.setCodigo(Integer.valueOf(pegaIdExemplar()));
            l.setDisponivel(status);

            d.alteraDisponibilidade(l);
        } else
        {
            JOptionPane.showMessageDialog(rootPane, "Livro não selecionado.");
        }
    }

    private void devolveExemplar() throws SQLException, ParseException
    {
        if (jTableEmprestimo.getSelectedRow() != -1)
        {
            // Altera a disponibilidade do livro
            alteraDisponibilidade(true);

            // Exclui o registo de empréstimo
            // Recebe a linha selecionada
            int linhaSelecionada = jTableEmprestimo.getSelectedRow();
            // Recebe o ID da linha selecionada
            int id = (int) jTableEmprestimo.getValueAt(linhaSelecionada, 0);
            // Remove o registro, usando como parâmetro, o id da linha selecionada                
            EmprestimoDAO d = new EmprestimoDAO();
            d.Remover(id);

            if (diferencaData() > 0)
            {

                JOptionPane.showMessageDialog(rootPane, "Emprestimo devolvido após o prazo de vencimento\n"
                        + "\n\nPassou " + diferencaData() + " dias do prazo. Esta multa deve ser registrada...");

                listaContatosEmprestimo();
                listaExemplares();
            } else
            {
                JOptionPane.showMessageDialog(rootPane, "Emprestimo devolvido com sucesso.");
                listaContatosEmprestimo();
                listaExemplares();
            }

        } else
        {
            JOptionPane.showMessageDialog(rootPane, "Emprestimo não selecionado.");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(JanelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(JanelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(JanelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(JanelaEmprestimo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run()
            {
                new JanelaEmprestimo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btGrupo;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTableEmprestimo;
    private javax.swing.JTable jTableExemplar;
    private javax.swing.JTable jTableFuncionario;
    private javax.swing.JTable jTableUsuario1;
    private javax.swing.JTable jTableUsuario2;
    private javax.swing.JRadioButton rbExemplar;
    private javax.swing.JRadioButton rbFuncionario;
    private javax.swing.JRadioButton rbUsuario;
    private javax.swing.JTextField txtCodEx;
    private javax.swing.JTextField txtCodFunc;
    private javax.swing.JTextField txtCodUser;
    private javax.swing.JTextField txtDataDevolucao;
    private javax.swing.JTextField txtDataEmprestimo;
    private javax.swing.JTextField txtObs;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
}
